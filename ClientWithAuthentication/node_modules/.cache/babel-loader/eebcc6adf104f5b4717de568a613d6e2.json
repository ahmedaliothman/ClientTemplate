{"ast":null,"code":"import { Constants } from \"../constants\";\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  token: null,\n  isRegistered: false,\n  error: null\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case Constants.LOGIN_SUCCESS:\n      const data = action.payload.data;\n      localStorage.setItem('data', JSON.stringify(data));\n      return { ...state,\n        isAuthenticated: true,\n        user: {\n          username: data.userName\n        },\n        token: data.access_token\n      };\n\n    case Constants.LOGOUT_REQUEST:\n      localStorage.removeItem('data');\n      return {\n        isAuthenticated: initialState.isAuthenticated,\n        user: initialState.user,\n        token: initialState.token\n      };\n\n    case Constants.REGISTER_SUCCESS:\n      console.log('REGISTER_SUCCESS', action.payload);\n      return { ...state,\n        isRegistered: true\n      };\n\n    case Constants.REGISTER_FAILURE:\n      const error = action.payload;\n      let message = JSON.stringify(error.data);\n      return { ...state,\n        isRegistered: false,\n        error: {\n          status: error.status,\n          message: message\n        }\n      };\n\n    default:\n      let localStorageData = localStorage.getItem('data');\n\n      if (localStorageData) {\n        localStorageData = JSON.parse(localStorageData);\n        return { ...state,\n          isAuthenticated: true,\n          user: {\n            username: localStorageData.userName\n          },\n          token: localStorageData.access_token\n        };\n      }\n\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/alipc/Desktop/Clients/ClientWithAuthentication/src/reducers/userReducer.js"],"names":["Constants","initialState","isAuthenticated","user","token","isRegistered","error","state","action","type","LOGIN_SUCCESS","data","payload","localStorage","setItem","JSON","stringify","username","userName","access_token","LOGOUT_REQUEST","removeItem","REGISTER_SUCCESS","console","log","REGISTER_FAILURE","message","status","localStorageData","getItem","parse"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,eAAe,EAAE,KADA;AAEjBC,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,YAAY,EAAE,KAJG;AAKjBC,EAAAA,KAAK,EAAE;AALU,CAArB;AAQA,gBAAe,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,SAAS,CAACU,aAAf;AACI,YAAMC,IAAI,GAAGH,MAAM,CAACI,OAAP,CAAeD,IAA5B;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAA7B;AACA,aAAO,EACH,GAAGJ,KADA;AAEHL,QAAAA,eAAe,EAAE,IAFd;AAGHC,QAAAA,IAAI,EAAE;AAAEc,UAAAA,QAAQ,EAAEN,IAAI,CAACO;AAAjB,SAHH;AAIHd,QAAAA,KAAK,EAAEO,IAAI,CAACQ;AAJT,OAAP;;AAMJ,SAAKnB,SAAS,CAACoB,cAAf;AACIP,MAAAA,YAAY,CAACQ,UAAb,CAAwB,MAAxB;AACA,aAAO;AACHnB,QAAAA,eAAe,EAAED,YAAY,CAACC,eAD3B;AAEHC,QAAAA,IAAI,EAAEF,YAAY,CAACE,IAFhB;AAGHC,QAAAA,KAAK,EAAEH,YAAY,CAACG;AAHjB,OAAP;;AAMJ,SAAKJ,SAAS,CAACsB,gBAAf;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgChB,MAAM,CAACI,OAAvC;AACA,aAAO,EACH,GAAGL,KADA;AAEHF,QAAAA,YAAY,EAAE;AAFX,OAAP;;AAIJ,SAAKL,SAAS,CAACyB,gBAAf;AACI,YAAMnB,KAAK,GAAGE,MAAM,CAACI,OAArB;AACA,UAAIc,OAAO,GAAGX,IAAI,CAACC,SAAL,CAAeV,KAAK,CAACK,IAArB,CAAd;AACA,aAAO,EACH,GAAGJ,KADA;AAEHF,QAAAA,YAAY,EAAE,KAFX;AAGHC,QAAAA,KAAK,EAAE;AAAEqB,UAAAA,MAAM,EAAErB,KAAK,CAACqB,MAAhB;AAAwBD,UAAAA,OAAO,EAAEA;AAAjC;AAHJ,OAAP;;AAKJ;AACI,UAAIE,gBAAgB,GAAGf,YAAY,CAACgB,OAAb,CAAqB,MAArB,CAAvB;;AACA,UAAID,gBAAJ,EAAsB;AAClBA,QAAAA,gBAAgB,GAAGb,IAAI,CAACe,KAAL,CAAWF,gBAAX,CAAnB;AACA,eAAO,EACH,GAAGrB,KADA;AAEHL,UAAAA,eAAe,EAAE,IAFd;AAGHC,UAAAA,IAAI,EAAE;AAAEc,YAAAA,QAAQ,EAAEW,gBAAgB,CAACV;AAA7B,WAHH;AAIHd,UAAAA,KAAK,EAAEwB,gBAAgB,CAACT;AAJrB,SAAP;AAMH;;AAED,aAAOZ,KAAP;AA5CR;AA8CH,CA/CD","sourcesContent":["import { Constants } from \"../constants\";\n\nconst initialState = {\n    isAuthenticated: false,\n    user: null,\n    token: null,\n    isRegistered: false,\n    error: null,\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case Constants.LOGIN_SUCCESS:\n            const data = action.payload.data;\n            localStorage.setItem('data', JSON.stringify(data));\n            return {\n                ...state,\n                isAuthenticated: true,\n                user: { username: data.userName },\n                token: data.access_token,\n            };\n        case Constants.LOGOUT_REQUEST:\n            localStorage.removeItem('data');\n            return {\n                isAuthenticated: initialState.isAuthenticated,\n                user: initialState.user,\n                token: initialState.token,\n            };\n       \n        case Constants.REGISTER_SUCCESS:\n            console.log('REGISTER_SUCCESS', action.payload);\n            return {\n                ...state,\n                isRegistered: true,\n            };\n        case Constants.REGISTER_FAILURE:\n            const error = action.payload;\n            let message = JSON.stringify(error.data);\n            return {\n                ...state,\n                isRegistered: false,\n                error: { status: error.status, message: message }\n            };\n        default:\n            let localStorageData = localStorage.getItem('data');\n            if (localStorageData) {\n                localStorageData = JSON.parse(localStorageData);\n                return {\n                    ...state,\n                    isAuthenticated: true,\n                    user: { username: localStorageData.userName },\n                    token: localStorageData.access_token,\n                }\n            }\n\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}