{"ast":null,"code":"import { call, put, takeEvery, all } from \"redux-saga/effects\";\nimport * as api from './api';\nimport { Constants } from \"../constants\";\nexport function* addPost({\n  payload\n}) {\n  try {\n    let output = yield call(api.createPost, payload);\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      payload: output\n    });\n    yield put({\n      type: 'FETCH_POSTS'\n    });\n  } catch (error) {\n    console.log('addPost error', error);\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeEvery('ADD_POST', addPost);\n}\n\nexport function* editPost({\n  payload\n}) {\n  try {\n    let output = yield call(api.editPost, payload);\n    yield put({\n      type: 'EDIT_POST_SUCCESS',\n      payload: output\n    });\n    yield put({\n      type: 'FETCH_POSTS'\n    });\n  } catch (error) {\n    console.log('editPost error', error);\n  }\n}\n\nfunction* watchEditPost() {\n  yield takeEvery('EDIT_POST', editPost);\n}\n\nexport function* deletePost({\n  payload\n}) {\n  try {\n    let output = yield call(api.deletePost, payload);\n    yield put({\n      type: 'DELETE_POST_SUCCESS',\n      payload: output\n    });\n    yield put({\n      type: 'FETCH_POSTS'\n    });\n  } catch (error) {\n    console.log('deletePost error', error);\n  }\n}\n\nfunction* watchDeletePost() {\n  yield takeEvery('DELETE_POST', deletePost);\n}\n\nexport function* fetchPosts() {\n  try {\n    const output = yield call(api.getPosts);\n    yield put({\n      type: 'FETCH_POSTS_SUCCESS',\n      payload: output\n    });\n  } catch (error) {\n    console.log('fetch posts error', error);\n  }\n}\n\nfunction* watchFetchPosts() {\n  yield takeEvery('FETCH_POSTS', fetchPosts);\n}\n\nexport function* fetchPostDetail({\n  payload\n}) {\n  try {\n    const output = yield call(api.getPostDetail, payload);\n    yield put({\n      type: 'FETCH_POST_DETAIL_SUCCESS',\n      payload: output\n    });\n  } catch (error) {\n    console.log('fetch posts error', error);\n  }\n}\n\nfunction* watchFetchPostDetail() {\n  yield takeEvery('FETCH_POST_DETAIL', fetchPostDetail);\n}\n\nexport function* addComment({\n  payload\n}) {\n  try {\n    const output = yield call(api.createComment, payload);\n    yield put({\n      type: 'ADD_COMMENTS_SUCCESS',\n      payload: output\n    });\n    yield put({\n      type: 'FETCH_COMMENTS',\n      payload: payload.postId\n    });\n  } catch (error) {\n    console.log('fetch posts error', error);\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeEvery('ADD_COMMENT', addComment);\n}\n\nexport function* fetchComments({\n  payload\n}) {\n  try {\n    const output = yield call(api.getComments, payload);\n    yield put({\n      type: 'FETCH_COMMENTS_SUCCESS',\n      payload: output\n    });\n  } catch (error) {\n    console.log('fetch posts error', error);\n  }\n}\n\nfunction* watchFetchComments() {\n  yield takeEvery('FETCH_COMMENTS', fetchComments);\n}\n\nexport function* login({\n  payload\n}) {\n  try {\n    let output = yield call(api.login, payload);\n    yield put({\n      type: 'LOGIN_REQUEST_SUCCESS',\n      payload: output\n    });\n  } catch (error) {\n    console.log('login error', error);\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery('LOGIN_REQUEST', login);\n}\n\nexport function* register({\n  payload\n}) {\n  try {\n    let output = yield call(api.register, payload);\n    yield put({\n      type: Constants.REGISTER_SUCCESS,\n      payload: output\n    });\n  } catch (error) {\n    console.log('register error', error);\n    yield put({\n      type: Constants.REGISTER_FAILURE,\n      payload: error\n    });\n  }\n}\n\nfunction* watchRegister() {\n  yield takeEvery(Constants.REGISTER_REQUEST, register);\n}\n\nexport default function* rootSaga() {\n  yield all([watchAddPost(), watchEditPost(), watchDeletePost(), watchFetchPosts(), watchFetchPostDetail(), watchAddComment(), watchFetchComments(), watchLogin(), watchRegister()]);\n}\n;","map":{"version":3,"sources":["/home/alipc/Desktop/Clients/ClientWithAuthentication/src/sagas/sagas.js"],"names":["call","put","takeEvery","all","api","Constants","addPost","payload","output","createPost","type","error","console","log","watchAddPost","editPost","watchEditPost","deletePost","watchDeletePost","fetchPosts","getPosts","watchFetchPosts","fetchPostDetail","getPostDetail","watchFetchPostDetail","addComment","createComment","postId","watchAddComment","fetchComments","getComments","watchFetchComments","login","watchLogin","register","REGISTER_SUCCESS","REGISTER_FAILURE","watchRegister","REGISTER_REQUEST","rootSaga"],"mappings":"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","sourcesContent":["import { call, put, takeEvery, all } from \"redux-saga/effects\";\nimport * as api from './api';\nimport { Constants } from \"../constants\";\n\nexport function* addPost({ payload }) {\n    try {\n        let output = yield call(api.createPost, payload);\n        yield put({ type: 'ADD_POST_SUCCESS', payload: output });\n        yield put({ type: 'FETCH_POSTS' });\n    } catch (error) {\n        console.log('addPost error', error);\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeEvery('ADD_POST', addPost);\n}\n\nexport function* editPost({ payload }) {\n    try {\n        let output = yield call(api.editPost, payload);\n        yield put({ type: 'EDIT_POST_SUCCESS', payload: output });\n        yield put({ type: 'FETCH_POSTS' });\n    } catch (error) {\n        console.log('editPost error', error);\n    }\n}\n\nfunction* watchEditPost() {\n    yield takeEvery('EDIT_POST', editPost);\n}\n\nexport function* deletePost({ payload }) {\n    try {\n        let output = yield call(api.deletePost, payload);\n        yield put({ type: 'DELETE_POST_SUCCESS', payload: output });\n        yield put({ type: 'FETCH_POSTS' });\n    } catch (error) {\n        console.log('deletePost error', error);\n    }\n}\n\nfunction* watchDeletePost() {\n    yield takeEvery('DELETE_POST', deletePost);\n}\n\nexport function* fetchPosts() {\n    try {\n        const output = yield call(api.getPosts);\n        yield put({ type: 'FETCH_POSTS_SUCCESS', payload: output });\n    } catch (error) {\n        console.log('fetch posts error', error);\n    }\n}\n\nfunction* watchFetchPosts() {\n    yield takeEvery('FETCH_POSTS', fetchPosts);\n}\n\nexport function* fetchPostDetail({ payload }) {\n    try {\n        const output = yield call(api.getPostDetail, payload);\n        yield put({ type: 'FETCH_POST_DETAIL_SUCCESS', payload: output });\n    } catch (error) {\n        console.log('fetch posts error', error);\n    }\n}\n\nfunction* watchFetchPostDetail() {\n    yield takeEvery('FETCH_POST_DETAIL', fetchPostDetail);\n}\n\nexport function* addComment({ payload }) {\n    try {\n        const output = yield call(api.createComment, payload);\n        yield put({ type: 'ADD_COMMENTS_SUCCESS', payload: output });\n        yield put({ type: 'FETCH_COMMENTS', payload: payload.postId });\n    } catch (error) {\n        console.log('fetch posts error', error);\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeEvery('ADD_COMMENT', addComment);\n}\n\nexport function* fetchComments({ payload }) {\n    try {\n        const output = yield call(api.getComments, payload);\n        yield put({ type: 'FETCH_COMMENTS_SUCCESS', payload: output });\n    } catch (error) {\n        console.log('fetch posts error', error);\n    }\n}\n\nfunction* watchFetchComments() {\n    yield takeEvery('FETCH_COMMENTS', fetchComments);\n}\n\nexport function* login({ payload }) {\n    try {\n        let output = yield call(api.login, payload);\n        yield put({ type: 'LOGIN_REQUEST_SUCCESS', payload: output });\n    } catch (error) {\n        console.log('login error', error);\n    }\n}\n\nfunction* watchLogin() {\n    yield takeEvery('LOGIN_REQUEST', login);\n}\n\nexport function* register({ payload }) {\n    try {\n        let output = yield call(api.register, payload);\n        yield put({ type: Constants.REGISTER_SUCCESS, payload: output });\n    } catch (error) {\n        console.log('register error', error);\n        yield put({ type: Constants.REGISTER_FAILURE, payload: error });\n    }\n}\n\nfunction* watchRegister() {\n    yield takeEvery(Constants.REGISTER_REQUEST, register);\n}\n\n\nexport default function* rootSaga() {\n    yield all([\n        watchAddPost(),\n        watchEditPost(),\n        watchDeletePost(),\n        watchFetchPosts(),\n        watchFetchPostDetail(),\n        watchAddComment(),\n        watchFetchComments(),\n        watchLogin(),\n        watchRegister()\n    ]);\n};"]},"metadata":{},"sourceType":"module"}